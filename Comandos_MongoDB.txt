Comandos para MongoDB Compass



//utilização do set para adicionar/modificar um campo
db.colecao.updateOne({
					{nome: "Lucas"},		//filtro para pesquisa
					{$set:{cargo:"..."}}	//atualização
					})		

########################################################################
					
//utilização do $unset para remover um campo
db.colecao.updateOne({
					{nome: "Lucas"},						//filtro para pesquisa
						{$unset:{"contato.telefone":""}}	//o valor não importa, apenas a chave; Acessando um doc dentro de outro doc ' "doc1.doc2": '
					)

########################################################################

//utilização do $rename para renomear campos
db.colecao.updateMany(
					{},											//filtro vazio para escolher todos
					{$rename:{"habilidades": "competencias"}}	//trocando habilidades por competencias
					)
					
########################################################################

//utilização do $currentDate para registrar a data exata de uma modificação
db.colecao.updateOne(
					{nome:"Lucas"},								//filtro para pesquisa
					{
					$set:{cargo:"Diretora de Projetos"},
					$currentDate:{ultima_modificacao: true}		//registrando a data da modificação
					}
					)
					
########################################################################

//utilização do $inc para incrementar um valor
db.colecao.updateMany(
					{departamento: "Tecnologia"},	//filtro para pesquisa
					{$inc:{salario: 500}}			//adicionando 500 reais para todos do dp de tecnologia
					)
					
########################################################################

//utilização do $mul para multiplicação
db.colecao.updateMany(
					{ativo:true},				//filtro para pesquisa
					{$mul: {salario: 1.05}}		//multiplicando o salario de todos em 5%
					)

########################################################################

//utilização do $push para adicionar um elemento em um array
db.colecao.updateOne(
					{nome:"Lucas"},							//filtro para pesquisa
					{$push:{competencias: "TypeScript"}}	//adicionando o elemento para o campo "competencias"
					)

########################################################################

//utilização do $pull para retirar um elemento de um array
db.colecao.updateOne(
					{nome: "Lucas"},				//filtro para pesquisa
					{$pull:{competencias: "Jira"}}	//retirando a competencia jira
					)

########################################################################

//utilizaçãodo $pop para remover o primeiro ou ultimo elemento de um array
db.colecao.updateOne(
					{nome: "Lucas"},			
					{$pop:{competencias: -1}}	//utilizar o -1 para remover o primeiro item e 1 para remover o ultimo 
					)
		
########################################################################

//utilização do $addToSet para adicionar um elemento em array apenas se ele não existir
db.colecao.updateOne(
					{nome: "Lucas"}.
					{$addToSet: {competencias: "React"}}	//só vai adicionar caso ele não tenha o React, se tiver apenas ignora
					)

########################################################################

//utilização do deleteOne e deleteMany
//Antes de deletar qualquer documento verificar se vai ser mesmo deletado

db.colecao.deleteMany({ativo: false})	//deletando todos os documentos que estão com o campo ativo: false

db.colecao.deleteOne({nome:"Lucas"})	//deletando o usuario Lucas

########################################################################

//utilização do find
db.colecao.find(
				{departamento: "Tecnologia"},	//filtro para pesquisa
				{nome: 1, salario: 1, _id: 0}	//projeção, onde 1 é true e 0 é false
				).sort({salario:1}) 			//aqui temos o sort que é 1 para crescente e -1 para decrescente
				 .limit(3)						//ou limit para limitar a pesquisa
				
db.colecao.find({habilidades: "React"})	//encontrando todos os usuarios que tem react como habilidade
db.colecao.find({habilidades:{$all: ["AWS", "Python"]}})	//encontrando todos os usuarios que no campo habilidades contenham AWS e Python
db.colecao.find({departamento: "Tecnologia", ativo: true}})	//encontrando todos do dp de tecnologia e q estão ativos

########################################################################

//utilizando o $gt/$gte/$lt/$lte
db.colecao.find({idade:{$gt:30}})	//encontrando todos os usuarios com mais de 30 anos
db.colecao.find({salario:{$gte: 7000, $lte: 9000}})	//encontrando todos os usuarios com salario entre 7000 e 9000

########################################################################

//utilizando o $regex
db.funcionarios.find({nome:{$regex: /^A/}})	//encontrando todos os usuarios cujo nome começa com a letra A
db.colecao.find({cargo:{$regex: /Desenvolvedor/i}})	//encontrando todos os usuarios que tem desenvolvedor no cargo, o i serve para encontrar lower e upper case

########################################################################

//utilizando o $exists
db.colecao.find({"contato.telefone": {$exists: true}})	//encontrando todos com numero de telefone

########################################################################

//utilizando o $type para ver o tipo de dado
db.colecao.find({salario: {$type: "double"}})	//todos numero de ponto flutuante

//utilizando o $or e $in
db.colecao.find({
				$or:[
					{departamento: "RH"},
					{departamento: "Projetos"}	//encontrando todos que são ou do RH ou do Projetos
					]
				})

db.colecao.find({
				departamento: "Tecnologia",		//condição AND
				$or: [
					{idade:{$gt:30}},
					{habilidades: "AWS"}		//condição OR
					]
				})
				

db.colecao.find({cargo: {$in: ["Dev", "Po"]}})


===========================================================================
//Retornar uma array com seus 2 primeiros elementos
db.campeoes.find(
  {},{skins:{$slice:2}},{nome:1,skins:1}
)

============================================================================

//$ne seleciona os documentos onde o valor do campo especificado não é igual ao valor especificado. Isso inclui documentos que não contêm o campo especificado.

db.campeoes.find(
  {recurso:{$ne:"Mana"}},{nome:1, recurso:1,_id:0}
)

==============================================================================

//Ele buscar apenas pelos dois elementos do Array e nenhum mais que tenha o nome deles em outros arrays
db.campeoes.find(
         {skins:["PROJETO","Florescer Espiritual"]},{nome:1,skins:1,_id:0}
  )

===============================================================================

//remove todas as instâncias dos valores especificados de uma array existente

db.campeoes.updateOne(
	{nome:"Jinx"},
  {$pullAll:{skins:["Odisseia","Arcane"]}}
)

===============================================================================

//inc

db.campeoes.updateOne(
  {nome:"Jinx"},
  {$inc:{"estatisticas.dano_ataque":-2}}
)

==============================================================================

//Usando $elemMatch, buscar campeões que tenham uma habilidade do tipo "R"

db.campeoes.find({
  habilidades: {
    $elemMatch: { tipo: "R" }
  }
})

===============================================================================

//Usando .sort(), ordenar campeões pelo maior dano de ataque

db.campeoes.find().sort(
                  { "estatisticas.dano_ataque": -1 })

=================================================================================

Usando .limit(), retornar apenas os 3 campeões com maior dano de ataque

db.campeoes.find().sort(
                    { "estatisticas.dano_ataque": -1 }).limit(3)


==================================================================================

Validação createCollection

1. Coleção livros (Simples):

db.createCollection("Livros", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["titulo", "ano_publicacao"],
      properties: {
        titulo:{ bsontype: "string", description: "O titulo é obrigatorio." },
        ano_publicacao: { bsonType:"int", description: "o ano de publicação é obrigatorio."}
        }
      }
    }
  })

2. Coleção autores:

db.createCollection("autores",{
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["nome"],
      properties:{
        nome:{bsonType:"string", description:"O nome é obrigatorio"},
        ano_nascimento:{bsonType:"int", description:"A data de nascimento é obrigatoria"}
      }
    }
  }
})


3. Coleção usuarios:

db.createCollection("usuarios", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["nome", "email", "ativo"],
      properties: {
        nome:{bsonType:"string", description:"O nome é obrigatorio"},
        email:{bsonType:"string", description:"O e-mail é obrigatorio"},
        ativo:{bsonType:"bool"}
      }
    }
  }
})


4. Coleção emprestimos:

db.createCollection("emprestimos", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["livro_id", "usuario_id", "data_emprestimo"],
      properties: {
        livro_id:{bsonType:"string", description:"Livro_id é obrigatorio"},
        usuario_id:{bsonType:"string", description:"Usuario_id é obrigatorio"},
        data_emprestimo:{bsonType:"date", description:"data_emprestimo é obrigatorio"}
      }
    }
  }
})


5. Coleção editoras:

db.createCollection("editoras",{
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["nome"],
      properties: {
        nome:{bsonType:"string", description:"nome é obrigatorio"},
        cidade:{bsonType:"string", description:"cidade é opcional"}
      }
    }
  }
})


6. Coleção salas_reuniao:

db.createCollection("salas_reuniao",{
  validator: {
    $jsonSchema:{
      bsonType: "object",
      required: ["nome", "capacidade"],
      properties:{
        nome:{bsonType:"string", description:"nome é obrigatorio"},
        capacidade:{bsonType:"int", description:"capacidade é obrigatorio"},
        possui_projetor:{bsonType:"bool", description:"Bool é opcional"}
      }
    }
  }
})

7. Coleção eventos_calendario:

db.createCollection("eventos_calendario",{
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["titulo", "data_inicio"],
      properties:{
        titulo:{bsonType:"string", description:"Titulo é obrigatorio"},
        data_inicio:{bsonType:"date", description:"data_inicio é obrigatorio"},
        data_fim:{bsonType:"date", description:"data_fim é opcional"}
      }
    }
  }
})

8. Coleção fornecedores:

db.createCollection("fornecedores",{
  validator:{
    $jsonSchema:{
      bsonType: "object",
      required: ["nome_empresa", "nif"],
      properties:{
        nome_empresa:{bsonType:"string", description:"nome_empresa é obrigatorio"},
        nif:{bsonType:"string", description:"nif é obrigatorio"},
        telefone:{bsonType:"string", description:"telefone é opcional"}
      }
    }
  }
})

9. Coleção inventario_ti:

db.createCollection("iventario_ti",{
  validator: {
    $jsonSchema:{
      bsonType:"object",
      required:["item_id", "tipo", "data_compra"],
      properties:{
        item_id:{bsonType:"string", description:"item_id é obrigatorio"},
        tipo:{bsonType:"string", description:"tipo é obrigatorio"},
        data_compra:{bsonType:"date", description:"data_compra é obrigatorio"}
      }
    }
  }
})

10. Coleção cursos_online:

db.createCollection("cursos_online",{
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required:[ "nome_curso", "duracao_horas", "possui_certificado" ],
      properties:{
        nome_curso:{bsonType:"string", description:"nome_curso é obrigatorio"},
        duracao_horas:{bsonType:"int", description:"duracao_horas é obrigatorio"},
        possui_certificado:{bsonType:"bool", description:"possui_certificado é obrigatorio"}
      }
    }
  }
})

==========================================================================================================

para inserir na coleção é só fazer isso

db.cursos_online.insertOne(
  {nome_curso: "Engenharia de Software",
   duracao_horas: 40,
   possui_certificado: true 
  })

e depois para consultar

db.cursos_online.find()

============================================================================================================


